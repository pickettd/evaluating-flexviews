{"name":"Evaluating Flexviews","body":"# Background info\r\n* Flexviews: http://code.google.com/p/flexviews/\r\n* Ubuntu 11.10 vm image (used amd64): http://www.thoughtpolice.co.uk/vmware/#ubuntu11.10\r\n* VMware Player: http://www.vmware.com/products/player/\r\n* Data for tests (used gridimage_base): http://data.geograph.org.uk/dumps/\r\n* Help series of blog posts explaining Flexviews, installation, and usage:\r\n    * http://www.mysqlperformanceblog.com/2011/03/23/using-flexviews-part-one-introduction-to-materialized-views/\r\n    * http://www.mysqlperformanceblog.com/2011/03/25/using-flexviews-part-two-change-data-capture/\r\n    * http://www.mysqlperformanceblog.com/2011/04/04/flexviews-part-3-improving-query-performance-using-materialized-views/\r\n* Example SQL statement describing a desired materialized view:\r\n`CREATE VIEW user_stat AS SELECT user_id as user_id, \r\nCOUNT(*) AS images, \r\nCOUNT(DISTINCT grid_reference) AS gridsquares, \r\nSUM(moderation_status = 'geograph') AS geographs, \r\nMAX(gridimage_id) AS last_submitted \r\nFROM gridimage_base GROUP BY user_id`\r\n\r\n# Setup\r\n## First get the required software and data\r\n* Download VMware Player and Ubuntu 11.10 image.\r\n* Install VMware Player and open the image.\r\n* Configure the image for 2 processors and left the rest as default.\r\n* Boot up the Ubuntu image inside VMware Player and login as the default user.\r\n* Flexviews requires PHP and several extensions, so install all that:\r\n  * `sudo apt-get install php5`\r\n  * `sudo apt-get install php-pear`\r\n  * `sudo pear install Console_Getopt`\r\n  * `sudo apt-get install php5-mysql`\r\n  * For the pcntl php extension I followed the instructions at <http://www.crimulus.com/2010/07/30/howto-enable-pcntl-in-ubuntu-php-installations/>:\r\n      * `sudo apt-get install php5-dev`\r\n      * `sudo apt-get install the dpkg-dev`\r\n      * `sudo apt-get source php5`\r\n      * `cd php5-`(WHATEVER_RELEASE)`/ext/pcntl`\r\n      * `sudo phpize`\r\n      * `sudo ./configure`\r\n      * `sudo make`\r\n      * Figure out where your .so files are (they're in the subfolder named by a series of numbers): `ls /usr/lib/php5/`\r\n      * `sudo cp modules/pcntl.so /usr/lib/php5/`\\<WHEREVER_YOUR_SO_FILES_ARE\\>`/`\r\n      * `echo \"extension=pcntl.so\" | sudo tee /etc/php5/conf.d/pcntl.ini`\r\n* Add the Percona public keys and repositories as per http://www.percona.com/doc/percona-server/5.5/installation/apt_repo.html\r\n  * `gpg --keyserver  hkp://keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A`\r\n  * `gpg -a --export CD2EFD2A | sudo apt-key add -`\r\n  * `echo \"deb http://repo.percona.com/apt oneiric main\" | sudo tee -a /etc/apt/sources.list`\r\n  * `echo \"deb-src http://repo.percona.com/apt oneiric main\" | sudo tee -a /etc/apt/sources.list`\r\n  * `sudo apt-get update`\r\n* Install Percona Server: `sudo apt-get install percona-server-server-5.5`\r\n* You should get the most up to date Flexviews (with bugfixes not found in the tarball):\r\n  * Install subversion: `sudo apt-get install subversion`\r\n  * Checkout the Flexviews source: `svn checkout http://flexviews.googlecode.com/svn/trunk/ flexviews`\r\n  * Make bugfix suggested in issue #10 (<http://code.google.com/p/flexviews/issues/detail?id=10>):\r\n      * Change line (as of r245 of the source) #636 from `}` to `$valList ='';}`\r\n  * The php script to convert SQL to Flexviews statements requires a php parser so get that: `wget http://php-sql-parser.googlecode.com/svn/trunk/php-sql-parser.php`\r\n* Get the Geograph database and import it:\r\n  * `mkdir ~/data`\r\n  * `cd ~/data`\r\n  * `wget http://data.geograph.org.uk/dumps/gridimage_base.mysql.gz`\r\n  * `wget http://data.geograph.org.uk/dumps/gridimage_base.schema`\r\n  * `gunzip gridimage_base.mysql.gz`\r\n  * Use mysql to create a database for the data to be imported to: `mysql -u root -p -e 'create database geographic;'`\r\n  * Import the downloaded data into the new database: `mysql -u root -p geographic < gridimage_base.mysql`\r\n\r\n## Configure\r\n* Percona server does not create a default my.conf and Flexviews requires a couple particular options set anyway (as described in <http://code.google.com/p/flexviews/wiki/Requirements>):\r\n  * I chose to use the my-large.cnf example file as a start:\r\n      * `sudo cp /usr/share/mysql/my-large.cnf /etc/my.cnf`\r\n      * Edit /etc/my.cnf to make the following changes and additions:\r\n          * Change binlog_format from mixed to row\r\n          * Make sure the server_id is set to a unique value (I set mine to 999)\r\n          * Add the line `transaction-isolation = READ-COMMITTED`\r\n      * Change the ownership of the configuration file to the mysql user: `sudo chown mysql:mysql /etc/my.cnf` \r\n  * Restart Percona to have it load the new configuration: `sudo service mysql restart`\r\n* The Flexviews component FlexCDC needs to be configured and installed:\r\n  * `cd ~/flexviews/consumer`\r\n  * Copy the example config file into place: `cp consumer.ini.example consumer.ini`\r\n  * Edit the config file as appropriate (the main required change is to put in the username/password for the sql account - in this example the user is just root and the password is whatever you set on the installation of Percona Server).\r\n  * `php ./setup_flexcdc.php`\r\n  * You can verify that the setup worked by running: `mysql -u root -p -e 'select * from flexviews.binlog_consumer_status\\G'` and seeing that consumer has found the binary logs\r\n* Note: you might want to restart the virtual machine here. I have in my notes that I did and I ran into problems with php until I did on my second run through when I didn't. Maybe one just needs to restart some particular service?\r\n* The last configuration step is to start the binary log consumer running and make sure it is monitoring changes from the gridimage table:\r\n  * The consumer_safe script will launch the log consumer and handle restarting it (send a HUP signal to it and php to kill it): `~/flexviews/consumer/consumer_safe.sh &`\r\n  * Configure consumer to monitor the gridimage table for changes: `php add_table.php --schema=geographic --table=gridimage_base`\r\n  * Install the Flexviews schema and sprocs: `mysql -u root -p < ~/flexviews/install.sql`\r\n\r\n# Create the materialized view\r\n## Option one: MV using the complete refresh method\r\n* The SQL for the view we want to materialize:\r\n    `CREATE TABLE user_stat_complete AS SELECT user_id as user_id, \r\n    COUNT(*) AS images, \r\n    COUNT(DISTINCT grid_reference) AS gridsquares, \r\n    SUM(moderation_status = 'geograph') AS geographs, \r\n    MAX(gridimage_id) AS last_submitted \r\n    FROM gridimage_base GROUP BY user_id;`\r\n* Since this is a complete view, we'll create the conversion by hand by creating converted_user_stat.sql as:\r\n\r\n    `CALL flexviews.create('flexviews', 'user_stat_complete', 'COMPLETE');`\r\n\r\n    `SET @mvid := LAST_INSERT_ID();`\r\n\r\n    `CALL.flexviews.set_definition(@mvid, '`\r\n\r\n    `SELECT user_id AS user_id,`\r\n\r\n    `COUNT(*) AS images,`\r\n\r\n    `COUNT(DISTINCT grid_reference) AS gridsquares,`\r\n\r\n    `SUM(moderation_status = \\'geograph\\') AS geographs,`\r\n\r\n    `MAX(gridimage_id) AS last_submitted FROM geographic.gridimage_base`\r\n\r\n    `GROUP BY user_id;');`\r\n\r\n    `CALL flexviews.enable(@mvid);`\r\n\r\n* Tell Flexviews to create and enable the complete_user_stat table: `mysql -u root -p < converted_user_stat_complete.sql`\r\n\r\n## Option two: Complete refresh MV on top of incremental refresh MV\r\n* The first step is to create an incremental materialized table that will track the changes we care about:\r\n  * The SQL for the first table we'll create is the following (stored in user_stat_helper.sql):\r\n`CREATE TABLE flexviews.user_stat_helper AS`\r\n`SELECT user_id AS user_id,`\r\n`grid_reference AS grid_reference,`\r\n`moderation_status AS moderation_status,`\r\n`gridimage_id AS gridimage_id FROM geographic.gridimage_base;`\r\n  * The results of using Flexviews' conversion tool (either the included convert.php or the hosted tool) are placed into converted_user_stat_helper.sql:\r\n\r\n        `CALL flexviews.create('flexviews', 'user_stat_helper', 'INCREMENTAL');`\r\n\r\n        `SET @mvid := LAST_INSERT_ID();`\r\n\r\n        `CALL flexviews.add_table(@mvid,'geographic', 'gridimage_base','alias', NULL);`\r\n\r\n        `CALL flexviews.add_expr(@mvid,'COLUMN', 'user_id', 'user_id');`\r\n\r\n        `CALL flexviews.add_expr(@mvid,'COLUMN', 'grid_reference', 'grid_reference');`\r\n\r\n        `CALL flexviews.add_expr(@mvid,'COLUMN', 'moderation_status', 'moderation_status');`\r\n\r\n        `CALL flexviews.add_expr(@mvid,'COLUMN', 'gridimage_id', 'gridimage_id');`\r\n\r\n        `CALL flexviews.enable(@mvid);`\r\n  * Tell Flexviews to create and enable the helper table: `mysql -u root -p < converted_user_stat_helper.sql`\r\n* Finally we create a complete materialized table on top of the helper table:\r\n  * The SQL for the view we want to materialize:\r\n`CREATE TABLE user_stat_combined AS SELECT user_id as user_id, \r\nCOUNT(*) AS images, \r\nCOUNT(DISTINCT grid_reference) AS gridsquares, \r\nSUM(moderation_status = 'geograph') AS geographs, \r\nMAX(gridimage_id) AS last_submitted \r\nFROM flexviews.user_stat_helper GROUP BY user_id;`\r\n  * Since this is a complete view, we'll create the conversion by hand by creating converted_user_stat.sql as:\r\n\r\n      `CALL flexviews.create('flexviews', 'user_stat_combined', 'COMPLETE');`\r\n\r\n      `SET @mvid := LAST_INSERT_ID();`\r\n\r\n      `CALL.flexviews.set_definition(@mvid, '`\r\n\r\n      `SELECT user_id AS user_id,`\r\n\r\n      `COUNT(*) AS images,`\r\n\r\n      `COUNT(DISTINCT grid_reference) AS gridsquares,`\r\n\r\n      `SUM(moderation_status = \\'geograph\\') AS geographs,`\r\n\r\n      `MAX(gridimage_id) AS last_submitted FROM user_stat_helper`\r\n\r\n      `GROUP BY user_id;');`\r\n\r\n      `CALL flexviews.enable(@mvid);`\r\n  * Tell Flexviews to create and enable the user_stat_combined table: `mysql -u root -p < converted_user_stat_combined.sql`\r\n\r\n# Test\r\n* The view of flexviews.user_stat_helper we created is an incrementally refreshed view of a subset of columns from the gridimage_base table. The flexviews.user_stat table is a materialized view that relies on essentially building a new table from the information in the helper table everytime it is refreshed. So the process of testing is to make changes in the geographic.gridimage_base table, refresh the flexviews.user_stat_helper table, refresh the flexviews.user_stat_combined table, refresh the flexviews.complete table, and check the results:\r\n  * `mysql -u root -p -e 'DELETE FROM geographic.gridimage_base WHERE user_id = 5 LIMIT 5;'\r\n  * For option 1:\r\n      * `mysql -u root -p -e \"CALL flexviews.refresh(`\\<look up complete mview id and put it here\\>`, 'COMPLETE'. NULL);\"`\r\n      * `mysql -u root -p -e 'SELECT * from flexviews.user_stat_complete where user_id = 5;'`\r\n  * For option 2:\r\n      * `mysql -u root -p -e \"CALL flexviews.refresh(`\\<look up incremental mview id and put it here\\>`, 'BOTH'. NULL);\"`\r\n      * `mysql -u root -p -e \"CALL flexviews.refresh(`\\<look up combined mview id and put it here\\>`, 'COMPLETE'. NULL);\"`\r\n      * `mysql -u root -p -e 'SELECT * from flexviews.user_stat_combined where user_id = 5;'`\r\n* The time to refresh a complete view is a about 10 seconds (for both the complete view on top of the incremental and the complete view on top of the base data). The time to refresh the incremental view was about 30 seconds. See notes in the last section about using just an incremental view.\r\n\r\n# Helpful notes\r\n* One time when testing these instructions I got a package error when trying to install php5-mysql after I had installed percona-server. If that happens to you read this <https://bugs.launchpad.net/percona-server/+bug/735463>.\r\n* If you want to create materialized views in databases OTHER than the 'flexviews' database, you'll need to edit the permissions granted to the flexviews user in the flexviews/install_schema.inc file (line 39).\r\n* I seemed to get a more correct conversion using the online Flexviews tool (<http://flexviews.sourceforge.net/convert.php>) rather than convert.php that is bundled with the source.\r\n* Something that the Flexviews tutorials mention that I couldn't get to work in the current is the get_id stored procedure. I just worked around it by querying the flexviews.mview table for the correct mview_id and using that for the refresh commands. You could probably automate this in scripts by using a SELECT command to search for the table you want to refresh, e.g. : `mysql -u root -p -e \"select mview_id from flexviews.mview where mview_name = 'user_stat_combined';\"`\r\n\r\n# Conclusion\r\n* It seems to me like the complete refresh method is the way to go on a query like this. The time to refresh is shorter, the design is simpler, and there are less moving pieces in the system that could possibly break. Using the complete refresh method means the system shouldn't need to run FlexCDC (the consumer application). Flexviews' incrementally refreshed views do work for certain types of queries and seem like they could be beneficial, but not this query.\r\n\r\n# Appendix: Attempt to use just incrementally refreshed view\r\n* From reading the Flexviews documentation, I assumed at first that just one incrementally refreshed table would be the correct solution. Unfortunately at this time it seems like an incremental view will not work for this type of query.\r\n* Desired SQL for view:\r\n`CREATE TABLE user_stat_incremental AS \r\nSELECT user_id as user_id, \r\nCOUNT(*) AS images, \r\nCOUNT(DISTINCT grid_reference) AS gridsquares, \r\nSUM(moderation_status = 'geograph') AS geographs, \r\nMAX(gridimage_id) AS last_submitted \r\nFROM geographic.gridimage_base GROUP BY user_id;`\r\n* First of all - I ran into a problem with the incremental refresh engine processing the logic of `moderation_status = 'geograph'` - this is probably something that can be worked around, but there is a more serious problem. Thus for the moment I will convert to a simplified view for illustration purposes. Converted SQL for incremental MV to be run in SQL (either from file or by hand):\r\n\r\n    `CALL flexviews.create('flexviews', 'user_stat_incremental', 'INCREMENTAL');`\r\n\r\n    `SET @mvid := LAST_INSERT_ID();`\r\n\r\n    `CALL flexviews.add_table(@mvid,'geographic', 'gridimage_base','alias', NULL);`\r\n\r\n    `CALL flexviews.add_expr(@mvid,'GROUP', 'user_id', 'user_id');`\r\n\r\n    `CALL flexviews.add_expr(@mvid,'COUNT', '*', 'images');`\r\n\r\n    `CALL flexviews.add_expr(@mvid,'COUNT_DISTINCT', 'grid_reference', 'gridsquares');`\r\n\r\n    `CALL flexviews.add_expr(@mvid,'MAX', 'gridimage_id', 'last_submitted');`\r\n\r\n    `CALL flexviews.enable(@mvid);`\r\n* Make a change to the base table: `mysql -u root -p -e 'delete from geographic.gridimage_base where user_id = 5 limit 1;'\r\n* Look up the table id for the incremental table: `mysql -u root -p -e \"select mview_id from flexviews.mview where mview_name = 'user_stat_incremental';\"`\r\n* Refresh the id you just looked up: `mysql -u root -p -e \"CALL flexview.refresh(`ID HERE`,'BOTH', NULL);\"`\r\n* Query the table to see what it shows for user_id 5 now: `mysql -u root -p -e 'select * from flexviews.user_stat_incremental where user_id = 5';`\r\n* This is the result I get in all my tests:\r\n\r\n    `+----------+---------+--------+-------------+----------------+`\r\n\r\n    `| mview$pk | user_id | images | gridsquares | last_submitted |`\r\n\r\n    `+----------+---------+--------+-------------+----------------+`\r\n\r\n    `|________4_|_______5_|______4_|___________3_|_____________17_|`\r\n\r\n    `|____16384_|_______5_|_____-1_|___________3_|_____________17_|`\r\n\r\n    `+----------+---------+--------+-------------+----------------+`\r\n\r\n* Which seems to me to break the semantic meaning of the table. Thus my suggestion to use the complete type of table for this style of query. The complete type of view also any type of SQL to be used but in theory has performance tradeoffs. In my tests I still found the incremental refreshes to take longer than the complete refreshes against the base table.","tagline":"A step-by-step evaluation of Flexviews using Ubuntu 11.10, Percona Server 5.5, and data from geograph.org.uk","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}